RayTracer by trim_team "Куклуск Lan"

311:
	Бондаренко Антон Николаевич,
	Воропаев Сергей Сергеевич, 
	Мелтонян Артур Саакович,
	Лыков Александр Андреевич,
312:
	Кочнев Никита Валерьевич.

Операционная система:
		Windows 8.1 x64
Оборудование: 
		Intel Core i7 6 ядер (12 потоков), 32 ГБ памяти
Формат файла настроек:
		В файле настроек set.txt указан формат
		или, если не понятно:
				ширина(800)высота(600)тени(0|1)Распараллеливание_вычислений(0|1)Антиалиассинг(0|1)
		

Описание основной части:
		1) Модели: 
				а) Используются данные в задании, в качестве стен взяты ( wow, magic ) столешницы стола =)
				б) Загрузка происходит через l3ds.h библиотеку ( частично код был взят и изменен из доп. части третьего задания ), загружаются в структуру, имеющую схожий тип со структурой из третьего задания
				в) Код, мягко говоря, не самый оптимизированный по длине в части загрузки мешей из файла, но выносить общую часть отдельно было лень, выглядит солиднее, когда 800 строк в файле сцены, да и эта часть кода выполняется единоразово в начале программы.
				г) за счет внешней переменной all_scale можно масштабировать модели при загрузке, и одновременно пододвигать все объекты сцены ближе к глазу. - Тестирование на изменение времени работы показало, что это не существенно.
		2) Необходимо реализовать простейший вариант камеры:
				0) все по ГОСТу!
		3) Трассировка лучей должна быть оптимизирована с помощью проверки пересечения с описывающими объёмами.
				а) Как и советовалось, были использованы Axis aligned bounding box
				б) Кол-во полигонов в некоторых моделях слишком велико, и Axis aligned bounding box не сильно спасают, но чтобы больше ускорить выполнение, пришлось бы писать, скорее всего, "ускоряющие структуры", но у нас еще функан, вер.моды, - вспомните свой 3ий курс =(
		4) Требуется реализовать инстанциирование.
				0) Все сделано ^_^  , все преобразования, как в описании задания.
						struct Mesh, struct object { ... *Mesh;}
		5) Обекты должны иметь как минимум 3 разных материала ( + освещенность ):
					а) материалы - матовый, несколько с различными коэф. отражения ( максимальное кол-во отражений луча ограничено жестко 2 для ускорения (это видно на картинке, что отражений не бесконечное кол-во), но это меняется, просто изменив в коде соответствующую константу )
					б) освещение по фонгу!! ( переделан шейдер 3его задания ), у части объектов материал не дает четкого блика
				0) соответственно сочетание этих пунктов дают различные материалы
				1) Источник света - сгусток энергии, положение которого задается константным вектором в коде. Точечный, белого цвета.
		6) Результат работы трассировщика должен сохраняться во внешний файл формата .bmp или .png.
				0) очевидно...
				
			
Бонусы:
		1) Параллелизм вычислений:
				Использование OpenMP для параллельной генерации изображения. +1 балл
		2) Антиалиасинг (1 балл):
				4 точки по краям и подсчет среднего из них в конце
					В методичке было написано запускать программу со специализированным флагом, но наша система и без него распараллеливает ( видно в диспетчере задач )
		3) Тени 
				Наверное, это считается резкими тенями. +1 балл

ВНИМАНИЕ!!!!
	Использовалось:
		1) CommonMath
		2) Процедура со страницы: ray-tracing.ru/articles244.html
				1) Мы переделали БЫ ее, хотя бы используя "replace all" для имен переменных, изменив порядок вычисления, порядок передачи параметров, их тип, сделав ее функцией с возвращаемым значением - пары флоатов,
			НО!!!
				Т.к. мы писали по памяти, а не ctrl+C - ctrl+V, а памяти у нас в 5 раз больше, чем у среднестатистического писавшего машграф, получилось повторить в точности то представление, за исключением красивых оттупов для читабельности.
				Если вас это не устроит, мы можем ее переписать.
		3) Загрузка l3ds и модель освещения по Фонгу взяты частично из 3его задания по машинной графике.
		4) Незакодденые алгоритмы с сайта ray-tracing.ru


Программа выводит на экран:
		1) Координаты Axis aligned bounding box всех объектов
		2) время работы программы
		
		
		
Время работы программы: 
		0) <15 секунд (0.txt); 
		1) <30 секунд (1.txt); 
		2) 0.5 - 1.5 минуты (2.txt, 3.txt, 4.txt, 5.txt, 6.txt);  - а так же все подобные разрешения и доп. параметры 
		3) ~25 минут (99.txt);
		4) 30-35 минут (666.txt);
		
		
P.S. Визуализированные изображения чуть отличаются, из-за того, что мы передвигали источник света и изменили материал ненаблюдаемой действительно стенки, а перерендеривать картинку с разрешением в 4000х3200 с антиалиасингом не самое приятное занятие перед зачетной сессией. 
		
P.S.S. Спасибо =)
	https://pp.vk.me/c624620/v624620017/105d1/iQVZiVqhlDk.jpg
